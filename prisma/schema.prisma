generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  type                String?
  provider            String?
  provider_account_id String?
  refresh_token       String?
  access_token        String?
  expires_at          DateTime?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model User {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  approved_at  DateTime?
  availability String?

  email      String? @unique
  username   String? @unique
  name       String? @db.VarChar(255)
  first_name String? @db.VarChar(255)
  last_name  String? @db.VarChar(255)
  password   String? @db.VarChar(255)
  domain     String? @unique
  avatar     String?

  phone_number  String?
  country       String?
  state         String?
  city          String?
  address       String?
  zip_code      String?
  gender        String?
  date_of_birth DateTime? @db.Date

  // billing id. e.g. stripe customer id
  billing_id String?

  type              String?   @default("user")
  email_verified_at DateTime?

  is_two_factor_enabled Int?    @default(0)
  two_factor_secret     String? // secret key for two factor authentication

  accounts                  Account[]
  creator_conversations     Conversation[] @relation("creator")
  participant_conversations Conversation[] @relation("participant")
  receiver_messages         Message[]      @relation("receiver")
  sender_messages           Message[]      @relation("sender")
  receiver_notifications    Notification[] @relation("receiver")
  sender_notifications      Notification[] @relation("sender")

  user_payment_methods UserPaymentMethod[]
  user_settings        UserSetting[]
  ucodes               Ucode[]
  roles                Role[]
  role_users           RoleUser[]
  payment_transactions PaymentTransaction[]
  availabilities       Availability[]
  review               Review[]
  booking              Booking[]
  car_wash_station     CarWashStation[]
  availability_rules   AvailabilityRule[]

  @@map("users")
}

model Ucode {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1) @db.SmallInt

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  token      String?
  email      String?
  expired_at DateTime?

  @@map("ucodes")
}

model Role {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status Int?    @default(1) @db.SmallInt
  title  String?
  name   String?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  permission_roles PermissionRole[]
  role_users       RoleUser[]
  permissions      Permission[]     @relation("PermissionToRole")

  @@map("roles")
}

model Permission {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  title      String?
  action     String?
  subject    String?
  conditions String?
  fields     String?

  permission_roles PermissionRole[]
  roles            Role[]           @relation("PermissionToRole")

  @@map("permissions")
}

model PermissionRole {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  permission_id String
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

model RoleUser {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

// this table stores notification event
model NotificationEvent {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status Int?    @default(1) @db.SmallInt
  type   String?
  text   String?

  notifications Notification[]

  @@map("notification_events")
}

model Notification {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  read_at DateTime?

  status Int? @default(1) @db.SmallInt

  sender_id String?
  sender    User?   @relation("sender", fields: [sender_id], references: [id])

  receiver_id String?
  receiver    User?   @relation("receiver", fields: [receiver_id], references: [id])

  notification_event_id String?
  notification_event    NotificationEvent? @relation(fields: [notification_event_id], references: [id])

  entity_id String?

  @@map("notifications")
}

model UserPaymentMethod {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  payment_method_id String?
  checkout_id       String?

  @@map("user_payment_methods")
}

model PaymentTransaction {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  store_id String?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  booking_id       String?
  booking          Booking? @relation(fields: [booking_id], references: [id])
  type             String?  @default("booking")
  withdraw_via     String?  @default("wallet")
  provider         String?
  reference_number String?
  status           String?  @default("pending")
  raw_status       String?
  amount           Decimal?
  currency         String?
  paid_amount      Decimal?
  paid_currency    String?

  @@map("payment_transactions")
}

// ---------Start Chat schema---------

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
}

// message is used for conversation
model Message {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status MessageStatus? @default(PENDING)

  sender_id String?
  sender    User?   @relation("sender", fields: [sender_id], references: [id])

  receiver_id String?
  receiver    User?   @relation("receiver", fields: [receiver_id], references: [id])

  conversation_id String?
  conversation    Conversation? @relation(fields: [conversation_id], references: [id], onDelete: Cascade)

  attachment_id String?
  attachment    Attachment? @relation(fields: [attachment_id], references: [id])

  message String?

  @@map("messages")
}

// this table stores attachment of message
model Attachment {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  name     String?
  type     String?
  size     Int?
  file     String?
  file_alt String?

  messages Message[]

  @@map("attachments")
}

// this table stores conversation
model Conversation {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  creator_id String?
  creator    User?   @relation("creator", fields: [creator_id], references: [id])

  participant_id String?
  participant    User?   @relation("participant", fields: [participant_id], references: [id])

  messages Message[]

  @@map("conversations")
}

// ---------End Chat schema---------

model Faq {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  sort_order Int?    @default(0)
  question   String?
  answer     String?

  @@map("faqs")
}

model Contact {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  first_name   String?
  last_name    String?
  email        String?
  phone_number String?
  message      String?

  @@map("contacts")
}

model SocialMedia {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  sort_order Int?    @default(0)
  name       String?
  url        String?
  icon       String?

  @@map("social_medias")
}

model WebsiteInfo {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  name                String?
  phone_number        String?
  email               String?
  address             String?
  logo                String?
  favicon             String?
  copyright           String?
  cancellation_policy String?

  @@map("website_infos")
}

model Setting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  category      String?
  label         String?
  description   String?
  key           String? @unique
  default_value String?

  user_settings UserSetting[]

  @@map("settings")
}

model UserSetting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  setting_id String?
  setting    Setting? @relation(fields: [setting_id], references: [id])

  value String?

  @@map("user_settings")
}

// this table stores example
// model Note {
//   id                String  @id @default(cuid())
//   created_at DateTime  @default(now())
//   updated_at DateTime  @default(now())
//   deleted_at DateTime?
//   status     Int?      @default(1) @db.SmallInt

//   title String?
//   body  String? @db.Text

//   tenant_id Int?
//   tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
//   @@map("posts")
// }

// car wash station table
model CarWashStation {
  id           String  @id @default(cuid())
  name         String
  description  String
  status       String  @default("active")
  image        String? // URL for the image of the station
  rating       Float   @default(0) // Average rating
  reviewCount  Int     @default(0) // Total reviews
  pricePerWash Float   @default(0)
  location     String // e.g., 'Tampan, Pekanbaru'
  latitude     Float // Latitude of the car wash station
  longitude    Float // Longitude of the car wash station
  user_id      String?
  user         User?   @relation(fields: [user_id], references: [id])

  services           Service[] // List of services offered at this station
  availabilities     Availability[] // List of availability for the station
  reviews            Review[] // List of reviews for the station
  bookings           Booking[]
  availability_rules AvailabilityRule[]
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
}

// service table
model Service {
  id                  String         @id @default(cuid())
  name                String // e.g., 'Medium', 'Regular', 'Special'
  description         String
  price               Float
  status              String         @default("active")
  image               String?
  car_wash_station_id String
  car_wash_station    CarWashStation @relation(fields: [car_wash_station_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  bookings   Booking[]
}

// availability table
model Availability {
  id      String   @id @default(cuid())
  day     String // e.g. 'Monday', 'Tuesday', etc.
  date    DateTime // Specific date for the availability
  user_id String
  user    User     @relation(fields: [user_id], references: [id])

  car_wash_station_id String
  car_wash_station    CarWashStation @relation(fields: [car_wash_station_id], references: [id])

  // snapshot of the rule used for this date (optional)
  opening_time          String?
  closing_time          String?
  slot_duration_minutes Int?
  is_closed             Boolean @default(false) // full-day closure flag

  time_slots TimeSlot[] // Multiple time slots per day
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  @@unique([date, car_wash_station_id])
}

model TimeSlot {
  id              String       @id @default(cuid())
  availability_id String
  start_time      String // e.g., '09.00 AM'
  end_time        String // e.g., '10.00 AM'
  availability    Availability @relation(fields: [availability_id], references: [id])
  capacity        Int          @default(1) // number of parallel washes allowed in this slot
  is_blocked      Boolean      @default(false)
  block_reason    String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  bookings Booking[]

  @@unique([availability_id, start_time, end_time])
  @@index([availability_id, start_time])
}

// Selectable days for recurring rules
enum DayOfWeek {
  SUN
  MON
  TUE
  WED
  THU
  FRI
  SAT
}

// Owner-defined weekly template to generate dated Availabilities
model AvailabilityRule {
  id                  String         @id @default(cuid())
  user_id             String
  user                User           @relation(fields: [user_id], references: [id])
  car_wash_station_id String
  car_wash_station    CarWashStation @relation(fields: [car_wash_station_id], references: [id])

  opening_time          String
  closing_time          String
  slot_duration_minutes Int
  days_open             DayOfWeek[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("availability_rules")
}

// booking table
model Booking {
  id                       String   @id @default(cuid())
  user_id                  String
  service_id               String
  car_wash_station_id      String
  time_slot_id             String
  carType                  String? // e.g., 'Sedan', 'SUV', 'Truck'
  bookingDate              DateTime
  total_amount             Decimal?
  status                   String   @default("pending") // e.g., 'Pending', 'Completed', 'Cancelled'
  payment_status           String?  @default("pending")
  // raw information from payment provider
  // raw status from payment provider
  payment_raw_status       String?
  // paid amount from payment provider
  paid_amount              Decimal?
  // paid currency from payment provider
  paid_currency            String?
  // e.g. stripe, paypal, razorpay
  payment_provider         String?
  // e.g. stripe payment reference id
  payment_reference_number String?

  payment_provider_charge_type String?              @default("percentage") // e.g. fixed, percentage
  payment_provider_charge      Decimal? // e.g. stripe payment provider charge
  user                         User                 @relation(fields: [user_id], references: [id])
  service                      Service              @relation(fields: [service_id], references: [id])
  car_wash_station             CarWashStation       @relation(fields: [car_wash_station_id], references: [id])
  time_slot                    TimeSlot             @relation(fields: [time_slot_id], references: [id])
  payment_transactions         PaymentTransaction[]
  created_at                   DateTime             @default(now())
  updated_at                   DateTime             @updatedAt

  // Prevent double booking for the same time slot
  @@unique([time_slot_id])
}

// Removed schedule rule feature; station owners define daily Availability directly.

model Voucher {
  id                  String   @id @default(cuid())
  code                String // e.g., 'DISCOUNT20'
  discount_percentage Float // e.g., 20 for 20% off
  is_active           Boolean  @default(true)
  expiryDate          DateTime // e.g., '2022-12-31'
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
}

// review table
model Review {
  id                  String         @id @default(cuid())
  user_id             String
  car_wash_station_id String
  rating              Int // Rating out of 5 stars (1-5)
  comment             String?
  user                User           @relation(fields: [user_id], references: [id])
  car_wash_station    CarWashStation @relation(fields: [car_wash_station_id], references: [id])
  created_at          DateTime       @default(now())
  updated_at          DateTime       @updatedAt
}
